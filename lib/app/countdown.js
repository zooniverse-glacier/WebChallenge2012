// Generated by CoffeeScript 1.3.3
(function() {
  var Countdown,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Countdown = (function() {

    Countdown.prototype.target = +new Date() + 1000 * 60 * 60 * 24 * 7;

    Countdown.prototype.el = null;

    Countdown.prototype.tagName = 'span';

    Countdown.prototype.className = 'its-the-final-countdown';

    Countdown.prototype.template = '<span class="weeks number"></span>\n<span class="weeks number"></span>\n<span class="separator">:</span>\n<span class="days number"></span>\n<span class="days number"></span>\n<span class="separator">:</span>\n<span class="hours number"></span>\n<span class="hours number"></span>\n<span class="separator">:</span>\n<span class="minutes number"></span>\n<span class="minutes number"></span>\n<span class="separator">:</span>\n<span class="seconds number"></span>\n<span class="seconds number"></span>';

    function Countdown(params) {
      var key, value, _ref;
      if (params == null) {
        params = {};
      }
      this.tick = __bind(this.tick, this);

      for (key in params) {
        value = params[key];
        this[key] = value;
      }
      this.target = +this.target;
      if ((_ref = this.el) == null) {
        this.el = "<" + this.tagName + "></" + this.tagName + ">";
      }
      this.el = $(this.el);
      this.el.html(this.template);
      this.el.addClass(this.className);
      this.tick();
    }

    Countdown.prototype.tick = function() {
      var days, hours, minutes, ms, seconds, weeks;
      ms = this.target - new Date();
      seconds = Math.floor(ms / 1000);
      minutes = Math.floor(seconds / 60);
      seconds = Math.floor(seconds - (minutes * 60));
      hours = Math.floor(minutes / 60);
      minutes = Math.floor(minutes - (hours * 60));
      days = Math.floor(hours / 24);
      hours = Math.floor(hours - (days * 24));
      weeks = Math.floor(days / 7);
      days = Math.floor(days - (weeks * 7));
      this.render({
        weeks: weeks,
        days: days,
        hours: hours,
        minutes: minutes,
        seconds: seconds
      });
      return setTimeout(this.tick, 1000);
    };

    Countdown.prototype.render = function(times) {
      var container, digit, i, unit, unitContainers, value, _results;
      _results = [];
      for (unit in times) {
        value = times[unit];
        unitContainers = this.el.find("." + unit + ".number");
        value = ("000" + value).slice(-2).split('');
        _results.push((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (i = _i = 0, _len = value.length; _i < _len; i = ++_i) {
            digit = value[i];
            container = unitContainers.eq(i);
            if (container.html() !== digit) {
              container.addClass('flip');
              setTimeout($.proxy(container, 'removeClass', 'flip'), 50);
              _results1.push(container.html(digit));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };

    return Countdown;

  })();

  window.App.Countdown = Countdown;

}).call(this);
