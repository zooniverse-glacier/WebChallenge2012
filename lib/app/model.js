// Generated by CoffeeScript 1.3.3
(function() {
  var Model,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  Model = (function() {

    function Model(opts) {
      this.fromJSON = __bind(this.fromJSON, this);

      this.fetch = __bind(this.fetch, this);
      this.id = opts.id || opts.data.id;
      if (opts.data != null) {
        this.fromJSON(opts.data);
      }
    }

    Model.base_url = 'pedapi.herokuapp.com';

    Model.prototype.trigger = function() {
      var args, event;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.constructor.trigger(event, args);
    };

    Model.trigger = function() {
      var args, event;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return $(document).trigger(event, args);
    };

    Model.prototype.on = function(event, callback) {
      return this.constructor.trigger(event(callback));
    };

    Model.on = function(event, callback) {
      return $(document).on(event, function() {
        var args, event;
        event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return callback(args);
      });
    };

    Model.prototype.fetch = function() {
      var _this = this;
      return $.getJSON("https://" + this.constructor.base_url + "/" + this.constructor.url + "/" + this.id + ".json?callback=?", function(data) {
        _this.fromJSON(data);
        return _this.trigger('fetch', _this);
      });
    };

    Model.prototype.fromJSON = function(data) {
      var key, value, _results;
      _results = [];
      for (key in data) {
        value = data[key];
        _results.push(this[key] = value);
      }
      return _results;
    };

    Model.fetchAll = function() {
      var _this = this;
      return $.getJSON("https://" + this.base_url + "/" + this.url + ".json?callback=?", function(data) {
        var datum, models, _i, _len;
        models = new Array;
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          datum = data[_i];
          models.push(new _this({
            data: datum
          }));
        }
        return _this.trigger('fetch-all', models);
      });
    };

    Model.fetchById = function(id) {
      return $.getJSON("https://" + this.base_url + "/" + this.url + "/" + id + ".json?callback=?", function(data) {
        var model;
        model = new this({
          data: data
        });
        return this.trigger('fetch', model);
      });
    };

    return Model;

  })();

  window.App.Model = Model;

}).call(this);
