// Generated by CoffeeScript 1.3.3
(function() {
  var Timeline,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Timeline = (function() {

    Timeline.prototype.base_image = 'url';

    Timeline.prototype.stage_colors = ['#29A8E0', '#80D017', '#FAAD18'];

    function Timeline(school, el) {
      this.render = __bind(this.render, this);

      this.showStep = __bind(this.showStep, this);

      this.animate = __bind(this.animate, this);

      this.remove = __bind(this.remove, this);

      var _this = this;
      this.school = school;
      this.el = $(el);
      this.width = this.el.width();
      this.startTime = moment(school.events[0].date).subtract('days', 20);
      this.endTime = moment(school.events[school.events.length - 1].date).add('days', 20);
      this.totalDays = moment(this.startTime).diff(this.endTime, 'days');
      this.render();
      this.currentlySelectedId = 0;
      this.animating = true;
      this.animate();
      $(".marker").hover(function(e) {
        _this.showStep($(e.currentTarget).data().id);
        clearTimeout(_this.currentTimeout);
        return _this.animating = false;
      }, function(e) {
        _this.animating = true;
        return _this.animate();
      });
    }

    Timeline.prototype.remove = function() {
      this.el.remove();
      return clearTimeout(this.currentTimeout);
    };

    Timeline.prototype.convertX = function(event) {
      this.days = moment(this.startTime).diff(event.date, 'days');
      return (this.days * 1.0 / (1.0 * this.totalDays)) * this.width;
    };

    Timeline.prototype.animate = function() {
      if (this.animating) {
        this.currentTimeout = setTimeout(this.animate, 2000);
      }
      this.currentlySelectedId = (this.currentlySelectedId + 1) % this.school.events.length;
      return this.showStep();
    };

    Timeline.prototype.showStep = function(number) {
      if (number == null) {
        number = null;
      }
      if (number) {
        this.currentlySelectedId = number;
      }
      $(".marker").removeClass('active');
      return $(".marker" + this.currentlySelectedId).addClass('active');
    };

    Timeline.prototype.render = function() {
      var content, event, index, markers;
      markers = (function() {
        var _i, _len, _ref, _results;
        _ref = this.school.events;
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          event = _ref[index];
          _results.push(this.renderEvent(event, index));
        }
        return _results;
      }).call(this);
      content = "<div class='timeline'>\n    <div class='bar'></div>\n    <ul class='inner'> \n        <li class='marker stage0' style='left:0px'><div style='background-color:black' class='markerInner'></div></li>\n          " + (markers.join(" ")) + "\n        <li class='marker stage0' style='right: 0'><div  style='background-color:black' class='markerInner'></div></li>\n    </ul>\n</div>";
      return this.el.html(content);
    };

    Timeline.prototype.renderEvent = function(event, id) {
      var stage, stageCol, tooltip, xPoint;
      xPoint = this.convertX(event);
      stage = event.phase;
      stageCol = this.stage_colors[stage - 1];
      tooltip = "<div class='tooltip'>\n  <p class='phase'>Phase " + event.phase + "</p>\n  <p class='date'>" + (moment(event.date).format("MMM Do YYYY")) + "</p>\n  <p class='event'>" + event.description + "</p>\n</div>";
      return "<li class='marker marker" + id + " stage" + stage + "' data-id=" + id + " style='left:" + xPoint + "px'> " + tooltip + " <div style='background-color:" + stageCol + "' class='markerInner'></div></li>";
    };

    return Timeline;

  })();

  window.App.Timeline = Timeline;

}).call(this);
